package okosama.app.state;


import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Handler;

import okosama.app.action.IViewAction;
import okosama.app.action.TabSelectAction;
import okosama.app.factory.ListenerFactory;
import okosama.app.service.MediaPlaybackService;
import okosama.app.tab.Tab;
import okosama.app.tab.TabPage;

public class DisplayStateAlbum extends absDisplayState {

	@Override
	public int ChangeDisplayBasedOnThisState(Tab tab) {
		// アルバム別選択画面への切り替え
		IViewAction action = new TabSelectAction( tab, TabPage.TABPAGE_ID_ALBUM );
		action.doAction(null);
		
		return 0;
	}

	@Override
	public int registerReceivers(int status) {
		// TODO: メディアタブは共通クラスにして、それを継承した方がいいかも
		
		if( handlers == null 
		|| receivers == null )
		{
			return -1;
		}
		IntentFilter f = null;
		
		switch( status )
		{
		case STATUS_ON_CREATE:
	        Handler reScanHdr = ListenerFactory.createRescanHandler();
	        handlers.put( HDLER_NAME_RESCAN, reScanHdr );

	        f = new IntentFilter();
	        f.addAction(Intent.ACTION_MEDIA_SCANNER_STARTED);
	        f.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
	        f.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
	        f.addDataScheme("file");
	        BroadcastReceiver scanListener = ListenerFactory.createScanListener( reScanHdr );
	        receivers.put( LSNER_NAME_SCAN, scanListener );
	        act.registerReceiver(scanListener, f);

			break;
		case STATUS_ON_RESUME:
			f = new IntentFilter();
	        f.addAction(MediaPlaybackService.META_CHANGED);
	        f.addAction(MediaPlaybackService.QUEUE_CHANGED);
	        BroadcastReceiver trackListListener = ListenerFactory.createTrackListener();
	        receivers.put( LSNER_NAME_TRACK, trackListListener );
	        act.registerReceiver(trackListListener, f);
	        trackListListener.onReceive(null, null);
	
	        // MusicUtils.setSpinnerState(this);
	        break;
		}
		return 0;
	}
	@Override
	public void unregisterReceivers(int status) {
		switch( status )
		{
		case STATUS_ON_PAUSE:
			// TODO: 関数化
			if( receivers.containsKey( LSNER_NAME_TRACK ))
			{
				BroadcastReceiver brTrack = receivers.get( LSNER_NAME_TRACK );
		        act.unregisterReceiver(brTrack);
		        receivers.remove(LSNER_NAME_TRACK);
			}
			if( handlers.containsKey( HDLER_NAME_RESCAN ))
			{
		        Handler hdrRescan = handlers.get( HDLER_NAME_RESCAN );
		        hdrRescan.removeCallbacksAndMessages(null);
		        // エントリは消さない
			}
			break;
		case STATUS_ON_DESTROY:
			clearReceivers();
			break;
		}
		
	}

}
