package okosama.app.adapter;

import okosama.app.OkosamaMediaPlayerActivity;
import okosama.app.R;
import okosama.app.service.MediaPlayer;
import okosama.app.storage.Database;
import okosama.app.widget.ExpList;
import okosama.app.widget.List;
import android.content.AsyncQueryHandler;
import android.content.ContentResolver;
import android.content.Context;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.provider.MediaStore;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AlphabetIndexer;
import android.widget.ImageView;
import android.widget.SectionIndexer;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;

/**
 * AlbumListのアダプタ
 * @author 25689
 *
 */
public class AlbumListAdapter extends SimpleCursorAdapter implements SectionIndexer {
    
	private OkosamaMediaPlayerActivity ctx = null;
    private final Drawable mNowPlayingOverlay;
    private final BitmapDrawable mDefaultAlbumIcon;
    private OkosamaMediaPlayerActivity mActivity;
    private int mAlbumIdx;
    private int mArtistIdx;
    private int mAlbumArtIndex;
    private String mArtistId;
    /**
     * アーティストIDの取得
     * @param artistId
     */
    public void setArtistId(String artistId)
    {
    	mArtistId = artistId;
    }
    private final Resources mResources;
    //private final StringBuilder mStringBuilder = new StringBuilder();
    private final String mUnknownAlbum;
    private final String mUnknownArtist;
    //private final String mAlbumSongSeparator;
    //private final Object[] mFormatArgs = new Object[1];
    private AlphabetIndexer mIndexer;
    //private ExpList mList;
    private AsyncQueryHandler mQueryHandler;
    private String mConstraint = null;
    private boolean mConstraintIsValid = false;
    
    static class ViewHolder {
        TextView line1;
        TextView line2;
        ImageView play_indicator;
        ImageView icon;
    }

    class QueryHandler extends AsyncQueryHandler {
        QueryHandler(ContentResolver res) {
            super(res);
        }
        
        @Override
        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
            //Log.i("@@@", "query complete");
        	mActivity.initAdapter(token,cursor);
        }
    }

    public AlbumListAdapter( OkosamaMediaPlayerActivity currentactivity, 
            int layout, Cursor cursor, String[] from, int[] to) {
        super(currentactivity, layout, cursor, from, to);

        //ctx = context;
        // mList = list;
        mActivity = currentactivity;
        mQueryHandler = new QueryHandler(mActivity.getContentResolver());
        
        mUnknownAlbum = mActivity.getString(R.string.unknown_album_name);
        mUnknownArtist = mActivity.getString(R.string.unknown_artist_name);
        //mAlbumSongSeparator = context.getString(R.string.albumsongseparator);

        Resources r = mActivity.getResources();
        mNowPlayingOverlay = r.getDrawable(R.drawable.indicator_ic_mp_playing_list);

        Bitmap b = BitmapFactory.decodeResource(r, R.drawable.albumart_mp_unknown_list);
        mDefaultAlbumIcon = new BitmapDrawable(mActivity.getResources(), b);
        // no filter or dither, it's a lot faster and we can't tell the difference
        mDefaultAlbumIcon.setFilterBitmap(false);
        mDefaultAlbumIcon.setDither(false);
        getColumnIndices(cursor);
        mResources = mActivity.getResources();
    }

    private void getColumnIndices(Cursor cursor) {
        if (cursor != null) {
            mAlbumIdx = cursor.getColumnIndexOrThrow(MediaStore.Audio.Albums.ALBUM);
            mArtistIdx = cursor.getColumnIndexOrThrow(MediaStore.Audio.Albums.ARTIST);
            mAlbumArtIndex = cursor.getColumnIndexOrThrow(MediaStore.Audio.Albums.ALBUM_ART);
            
            if (mIndexer != null) {
                mIndexer.setCursor(cursor);
            } else {
                mIndexer = new MusicAlphabetIndexer(cursor, mAlbumIdx, mResources.getString(
                        R.string.fast_scroll_alphabet));
            }
        }
    }
    
    public AsyncQueryHandler getQueryHandler() {
        return mQueryHandler;
    }

    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
       View v = super.newView(context, cursor, parent);
       ViewHolder vh = new ViewHolder();
       vh.line1 = (TextView) v.findViewById(R.id.line1);
       vh.line2 = (TextView) v.findViewById(R.id.line2);
       vh.play_indicator = (ImageView) v.findViewById(R.id.play_indicator);
       vh.icon = (ImageView) v.findViewById(R.id.icon);
       vh.icon.setBackgroundDrawable(mDefaultAlbumIcon);
       vh.icon.setPadding(0, 0, 1, 0);
       v.setTag(vh);
       return v;
    }

    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        
        ViewHolder vh = (ViewHolder) view.getTag();

        String name = cursor.getString(mAlbumIdx);
        String displayname = name;
        boolean unknown = name == null || name.equals(MediaStore.UNKNOWN_STRING); 
        if (unknown) {
            displayname = mUnknownAlbum;
        }
        vh.line1.setText(displayname);
        
        name = cursor.getString(mArtistIdx);
        displayname = name;
        if (name == null || name.equals(MediaStore.UNKNOWN_STRING)) {
            displayname = mUnknownArtist;
        }
        vh.line2.setText(displayname);

        ImageView iv = vh.icon;
        // We don't actually need the path to the thumbnail file,
        // we just use it to see if there is album art or not
        String art = cursor.getString(mAlbumArtIndex);
        long aid = cursor.getLong(0);
        if (unknown || art == null || art.length() == 0) {
            iv.setImageDrawable(null);
        } else {
            Drawable d = MediaPlayer.getCachedArtwork(context, aid, mDefaultAlbumIcon);
            iv.setImageDrawable(d);
        }
        
        long currentalbumid = MediaPlayer.getCurrentAlbumId();
        iv = vh.play_indicator;
        if (currentalbumid == aid) {
            iv.setImageDrawable(mNowPlayingOverlay);
        } else {
            iv.setImageDrawable(null);
        }
    }
    
    @Override
    public void changeCursor(Cursor cursor) {
        if (mActivity.isFinishing() && cursor != null ) {
            cursor.close();
            cursor = null;
        }
        if (cursor != Database.getInstance(ctx).getCursor( Database.AlbumCursorName )) {
        	Database.getInstance(ctx).setCursor( Database.AlbumCursorName, cursor );
            getColumnIndices(cursor);
            super.changeCursor(cursor);
        }
    }
    
    @Override
    public Cursor runQueryOnBackgroundThread(CharSequence constraint) {
        String s = constraint.toString();
        if (mConstraintIsValid && (
                (s == null && mConstraint == null) ||
                (s != null && s.equals(mConstraint)))) {
            return getCursor();
        }
        // TODO: mArtistIdは暫定版なので、後で直すこと
        Cursor c = Database.getInstance(ctx).createAlbumCursor(null, s, mArtistId);
        mConstraint = s;
        mConstraintIsValid = true;
        return c;
    }
    
    public Object[] getSections() {
        return mIndexer.getSections();
    }
    
    public int getPositionForSection(int section) {
        return mIndexer.getPositionForSection(section);
    }
    
    public int getSectionForPosition(int position) {
        return 0;
    }
}
