package okosama.app.adapter;

import okosama.app.OkosamaMediaPlayerActivity;
import okosama.app.R;
import okosama.app.storage.Database;
import android.content.AsyncQueryHandler;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.provider.MediaStore;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;

public class PlaylistListAdapter extends SimpleCursorAdapter {
    private static final long RECENTLY_ADDED_PLAYLIST = -1;
    private static final long ALL_SONGS_PLAYLIST = -2;
    private static final long PODCASTS_PLAYLIST = -3;
	
    int mTitleIdx;
    int mIdIdx;
    boolean createShortcut;
    public boolean isCreateShortcut() {
		return createShortcut;
	}
	public void setCreateShortcut(boolean createShortcut) {
		this.createShortcut = createShortcut;
	}

	private OkosamaMediaPlayerActivity mActivity = null;
    private AsyncQueryHandler mQueryHandler;
    private String mConstraint = null;
    private boolean mConstraintIsValid = false;

    class QueryHandler extends AsyncQueryHandler {
        QueryHandler(ContentResolver res) {
            super(res);
        }
        
        @Override
        protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
            //Log.i("@@@", "query complete: " + cursor.getCount() + "   " + mActivity);
            if (cursor != null) {
                cursor = Database.getInstance(OkosamaMediaPlayerActivity.isExternalRef()).mergedCursor(cursor, createShortcut);
            }
            mActivity.initAdapter(token,cursor);
        }
    }

    public PlaylistListAdapter(Context context, OkosamaMediaPlayerActivity currentactivity,
            int layout, Cursor cursor, String[] from, int[] to) {
        super(context, layout, cursor, from, to);
        mActivity = currentactivity;
        getColumnIndices(cursor);
        mQueryHandler = new QueryHandler(context.getContentResolver());
    }
    private void getColumnIndices(Cursor cursor) {
        if (cursor != null) {
            mTitleIdx = cursor.getColumnIndexOrThrow(MediaStore.Audio.Playlists.NAME);
            mIdIdx = cursor.getColumnIndexOrThrow(MediaStore.Audio.Playlists._ID);
        }
    }

    public void setActivity(OkosamaMediaPlayerActivity newactivity) {
        mActivity = newactivity;
    }
    
    public AsyncQueryHandler getQueryHandler() {
        return mQueryHandler;
    }

    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        
        TextView tv = (TextView) view.findViewById(R.id.line1);
        
        String name = cursor.getString(mTitleIdx);
        tv.setText(name);
        
        long id = cursor.getLong(mIdIdx);
        
        ImageView iv = (ImageView) view.findViewById(R.id.icon);
        if (id == RECENTLY_ADDED_PLAYLIST) {	// TODO:ëóêMå≥ämîF
            iv.setImageResource(R.drawable.ic_mp_playlist_recently_added_list);
        } else {
            iv.setImageResource(R.drawable.ic_mp_playlist_list);
        }
        ViewGroup.LayoutParams p = iv.getLayoutParams();
        p.width = ViewGroup.LayoutParams.WRAP_CONTENT;
        p.height = ViewGroup.LayoutParams.WRAP_CONTENT;

        iv = (ImageView) view.findViewById(R.id.play_indicator);
        iv.setVisibility(View.GONE);

        view.findViewById(R.id.line2).setVisibility(View.GONE);
    }

    @Override
    public void changeCursor(Cursor cursor) {
        if (mActivity.isFinishing() && cursor != null) {
            cursor.close();
            cursor = null;
        }
        if (cursor != Database.getInstance(mActivity).getCursor(Database.PlaylistCursorName)) {
        	Database.getInstance(mActivity).setCursor(Database.PlaylistCursorName, cursor);
            super.changeCursor(cursor);
            getColumnIndices(cursor);
        }
    }
    
    @Override
    public Cursor runQueryOnBackgroundThread(CharSequence constraint) {
        String s = constraint.toString();
        if (mConstraintIsValid && (
                (s == null && mConstraint == null) ||
                (s != null && s.equals(mConstraint)))) {
            return getCursor();
        }
        Cursor c = Database.getInstance(OkosamaMediaPlayerActivity.isExternalRef()).createPlaylistCursor(null, s, createShortcut);
        mConstraint = s;
        mConstraintIsValid = true;
        return c;
    }
}
